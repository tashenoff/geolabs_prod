{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["// Particle animation\nclass ParticleAnimation {\n    constructor(el, { quantity = 710, staticity = 50, ease = 50 } = {}) {\n      this.canvas = el;\n      if (!this.canvas) return;\n      this.canvasContainer = this.canvas.parentElement;\n      this.context = this.canvas.getContext('2d');\n      this.dpr = window.devicePixelRatio || 1;\n      this.settings = {\n        quantity: quantity,\n        staticity: staticity,\n        ease: ease,\n      };\n      this.circles = [];\n      this.mouse = {\n        x: 0,\n        y: 0,\n      };\n      this.canvasSize = {\n        w: 0,\n        h: 0,\n      };\n      this.onMouseMove = this.onMouseMove.bind(this);\n      this.initCanvas = this.initCanvas.bind(this);\n      this.resizeCanvas = this.resizeCanvas.bind(this);\n      this.drawCircle = this.drawCircle.bind(this);\n      this.drawParticles = this.drawParticles.bind(this);\n      this.remapValue = this.remapValue.bind(this);\n      this.animate = this.animate.bind(this);\n      this.init();\n    }\n  \n    init() {\n      this.initCanvas();\n      this.animate();\n      window.addEventListener('resize', this.initCanvas);\n      window.addEventListener('mousemove', this.onMouseMove);\n    }\n  \n    initCanvas() {\n      this.resizeCanvas();\n      this.drawParticles();\n    }\n  \n    onMouseMove(event) {\n      const { clientX, clientY } = event;\n      const rect = this.canvas.getBoundingClientRect();\n      const { w, h } = this.canvasSize;\n      const x = clientX - rect.left - (w / 2);\n      const y = clientY - rect.top - (h / 2);\n      const inside = x < (w / 2) && x > -(w / 2) && y < (h / 2) && y > -(h / 2);\n      if (inside) {\n        this.mouse.x = x;\n        this.mouse.y = y;\n      }\n    }\n  \n    resizeCanvas() {\n      this.circles.length = 0;\n      this.canvasSize.w = this.canvasContainer.offsetWidth;\n      this.canvasSize.h = this.canvasContainer.offsetHeight;\n      this.canvas.width = this.canvasSize.w * this.dpr;\n      this.canvas.height = this.canvasSize.h * this.dpr;\n      this.canvas.style.width = this.canvasSize.w + 'px';\n      this.canvas.style.height = this.canvasSize.h + 'px';\n      this.context.scale(this.dpr, this.dpr);\n    }\n  \n    circleParams() {\n      const x = Math.floor(Math.random() * this.canvasSize.w);\n      const y = Math.floor(Math.random() * this.canvasSize.h);\n      const translateX = 0;\n      const translateY = 0;\n      const size = Math.floor(Math.random() * 2) + 1;\n      const alpha = 0;\n      const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));\n      const dx = (Math.random() - 0.5) * 0.2;\n      const dy = (Math.random() - 0.5) * 0.2;\n      const magnetism = 0.1 + Math.random() * 4;\n      return { x, y, translateX, translateY, size, alpha, targetAlpha, dx, dy, magnetism };\n    }\n  \n    drawCircle(circle, update = false) {\n      const { x, y, translateX, translateY, size, alpha } = circle;\n      this.context.translate(translateX, translateY);\n      this.context.beginPath();\n      this.context.arc(x, y, size, 0, 2 * Math.PI);\n      this.context.fillStyle = `rgba(61, 130, 151, ${alpha})`;\n      this.context.fill();\n      this.context.setTransform(this.dpr, 0, 0, this.dpr, 0, 0);\n      if (!update) {\n        this.circles.push(circle);\n      }\n    }\n  \n    clearContext() {\n      this.context.clearRect(0, 0, this.canvasSize.w, this.canvasSize.h);\n    }\n  \n    drawParticles() {\n      this.clearContext();\n      const particleCount = this.settings.quantity;\n      for (let i = 0; i < particleCount; i++) {\n        const circle = this.circleParams();\n        this.drawCircle(circle);\n      }\n    }\n  \n    // This function remaps a value from one range to another range\n    remapValue(value, start1, end1, start2, end2) {\n      const remapped = (value - start1) * (end2 - start2) / (end1 - start1) + start2;\n      return remapped > 0 ? remapped : 0;\n    }\n  \n    animate() {\n      this.clearContext();\n      this.circles.forEach((circle, i) => {\n        // Handle the alpha value\n        const edge = [\n          circle.x + circle.translateX - circle.size, // distance from left edge\n          this.canvasSize.w - circle.x - circle.translateX - circle.size, // distance from right edge\n          circle.y + circle.translateY - circle.size, // distance from top edge\n          this.canvasSize.h - circle.y - circle.translateY - circle.size, // distance from bottom edge\n        ];\n        const closestEdge = edge.reduce((a, b) => Math.min(a, b));\n        const remapClosestEdge = this.remapValue(closestEdge, 0, 20, 0, 1).toFixed(2);\n        if (remapClosestEdge > 1) {\n          circle.alpha += 0.02;\n          if (circle.alpha > circle.targetAlpha) circle.alpha = circle.targetAlpha;\n        } else {\n          circle.alpha = circle.targetAlpha * remapClosestEdge;\n        }\n        circle.x += circle.dx;\n        circle.y += circle.dy;\n        circle.translateX += ((this.mouse.x / (this.settings.staticity / circle.magnetism)) - circle.translateX) / this.settings.ease;\n        circle.translateY += ((this.mouse.y / (this.settings.staticity / circle.magnetism)) - circle.translateY) / this.settings.ease;\n        // circle gets out of the canvas\n        if (circle.x < -circle.size || circle.x > this.canvasSize.w + circle.size || circle.y < -circle.size || circle.y > this.canvasSize.h + circle.size) {\n          // remove the circle from the array\n          this.circles.splice(i, 1);\n          // create a new circle\n          const circle = this.circleParams();\n          this.drawCircle(circle);\n          // update the circle position\n        } else {\n          this.drawCircle({ ...circle, x: circle.x, y: circle.y, translateX: circle.translateX, translateY: circle.translateY, alpha: circle.alpha }, true);\n        }\n      });\n      window.requestAnimationFrame(this.animate);\n    }\n  }\n  \n  // Init ParticleAnimation\n  const canvasElements = document.querySelectorAll('[data-particle-animation]');\n  canvasElements.forEach(canvas => {\n    const options = {\n      quantity: canvas.dataset.particleQuantity,\n      staticity: canvas.dataset.particleStaticity,\n      ease: canvas.dataset.particleEase,\n    };\n    new ParticleAnimation(canvas, options);\n  });"],"names":["ParticleAnimation","el","quantity","staticity","ease","this","canvas","canvasContainer","parentElement","context","getContext","dpr","window","devicePixelRatio","settings","circles","mouse","x","y","canvasSize","w","h","onMouseMove","bind","initCanvas","resizeCanvas","drawCircle","drawParticles","remapValue","animate","init","addEventListener","event","clientX","clientY","rect","getBoundingClientRect","left","top","length","offsetWidth","offsetHeight","width","height","style","scale","circleParams","Math","floor","random","translateX","translateY","size","alpha","targetAlpha","parseFloat","toFixed","dx","dy","magnetism","circle1","update","translate","beginPath","arc","PI","fillStyle","fill","setTransform","push","clearContext","clearRect","particleCount","i","circle","value","start1","end1","start2","end2","remapped","forEach","closestEdge","reduce","a","b","min","remapClosestEdge","splice","requestAnimationFrame","canvasElements","document","querySelectorAll","options","dataset","particleQuantity","particleStaticity","particleEase"],"version":3,"file":"contact.1ab7d645.js.map"}